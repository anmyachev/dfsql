name: Build and publish to pypi

on:
  push:
    branches:
      - stable
      - manylinux

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install --no-cache-dir -e .[test]
      - name: Run unit tests
        run: pytest
        shell: bash

  deploy_pypi:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build wheels
      run: |
        SETUP_PLAT_NAME=linux python3 setup.py sdist bdist_wheel --plat-name manylinux1_x86_64
        SETUP_PLAT_NAME=linux python3 setup.py sdist bdist_wheel --plat-name manylinux1_i686
    - name: Publish to PyPI
      env:
        TWINE_USERNAME:  __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*manylinux*.whl

  test-clean-install-ubuntu:
    needs: [ deploy_pypi ]
    runs-on: ubuntu-latest
    name: test-clean-install-ubuntu
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7.x"
          architecture: "x64"
      - name: Clean install and run
        shell: bash -l {0}
        run: |
          python -m pip install -e .[all]
          python -c "from dfsql import sql_query"


